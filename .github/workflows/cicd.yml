name: workflow
on:
  push:
    branches: [ main , dev ]
  workflow_dispatch:

jobs:
  build:

    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install -r requirements.txt
    - uses: actions/checkout@v2
    - name: Build the Docker image
      run: docker-compose up -d
    - name: Public Ip
      id: ipv4
      run: |
        echo 'PUBLIC_IP<<EOF' >> $GITHUB_ENV
        curl -s checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//' >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
  test:
    name: testing the code
    needs: [build]
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
      - name: Run Tests
        run: |
          python3 ./tests/test.py test
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  DeployDev:
    name: Deploy to Dev 
    if: |
     github.event.ref == 'refs/heads/main' ||
     github.event.ref == 'refs/heads/release' ||
     github.event.ref == 'refs/heads/release'
    needs: [build , test  ]
    runs-on: self-hosted
    environment: 
      name: Dev
      url: 'http:${{ env.PUBLIC_IP }}:5000'
    steps:
      - name: Deploy
        run: echo I am deploying on Dev Environment ! 
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 
      - name: Build the container image
        run: docker build . --file Dockerfile --tag devsec-test:latest
      - uses: anchore/scan-action@v3
        with:
            image: "devsec-test:latest"
            fail-build: false
      - uses: actions/checkout@master
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: rupesh1050/devsec-test-dev
          username: ${{ secrets.DOCKER_NAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          dockerfile: Dockerfile
          tag_with_ref: 'refs/*'
          labels: ${{ steps.meta.outputs.labels }}

  DeployStaging:
    name: Deploy to Staging 
    if: |
     github.event.ref == 'refs/heads/release'
    needs: [DeployDev]
    runs-on: ubuntu-latest
    environment: 
      name: Staging
      url: 'http:${{ env.PUBLIC_IP }}:5000'
    steps:
      - name: Deploy
        run: echo I am on Deploying on Staging Environment! 
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 
      - name: Build the container image
        run: docker build . --file Dockerfile --tag devsec-test:latest
      - uses: anchore/scan-action@v3
        with:
            image: "devsec-test:latest"
            fail-build: false
      - uses: actions/checkout@master
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: rupesh1050/devsec-test-staging
          username: ${{ secrets.DOCKER_NAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          dockerfile: Dockerfile
          tag_with_ref: 'refs/*'
          labels: ${{ steps.meta.outputs.labels }}
  DeployProd:
    name: Deploy to Production 
    needs: [DeployStaging]
    runs-on: ubuntu-latest
    environment: 
      name: Production
      url: 'http:${{ env.PUBLIC_IP }}:5000'
    steps:
      - name: Deploy
        run: echo This is Production deployment! 
      - uses: actions/checkout@v2
      - name: Build the container image
        run: docker build . --file Dockerfile --tag localbuild/testimage:latest
      - uses: anchore/scan-action@v3
        with:
            image: "localbuild/testimage:latest"
            fail-build: false
      - uses: actions/checkout@master
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: rupesh1050/devsec-test-prod
          username: ${{ secrets.DOCKER_NAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          dockerfile: Dockerfile
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
